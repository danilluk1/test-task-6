// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: products_categories.sql

package db

import (
	"context"
)

const deleteProductsCategoriesRelationshipByProductCategoryId = `-- name: DeleteProductsCategoriesRelationshipByProductCategoryId :exec
DELETE FROM products_products_categories WHERE product_category_id = $1
`

func (q *Queries) DeleteProductsCategoriesRelationshipByProductCategoryId(ctx context.Context, productCategoryID int32) error {
	_, err := q.db.ExecContext(ctx, deleteProductsCategoriesRelationshipByProductCategoryId, productCategoryID)
	return err
}

const deleteProductsCategoriesRelationshipByProductId = `-- name: DeleteProductsCategoriesRelationshipByProductId :exec
DELETE FROM products_products_categories WHERE product_id = $1
`

func (q *Queries) DeleteProductsCategoriesRelationshipByProductId(ctx context.Context, productID int32) error {
	_, err := q.db.ExecContext(ctx, deleteProductsCategoriesRelationshipByProductId, productID)
	return err
}

const insertNewProductsCategoriesRelationship = `-- name: InsertNewProductsCategoriesRelationship :one
INSERT INTO products_products_categories(
  product_category_id,
  product_id
) VALUES (
  $1, $2
) RETURNING product_category_id, product_id
`

type InsertNewProductsCategoriesRelationshipParams struct {
	ProductCategoryID int32 `json:"product_category_id"`
	ProductID         int32 `json:"product_id"`
}

func (q *Queries) InsertNewProductsCategoriesRelationship(ctx context.Context, arg InsertNewProductsCategoriesRelationshipParams) (ProductsProductsCategory, error) {
	row := q.db.QueryRowContext(ctx, insertNewProductsCategoriesRelationship, arg.ProductCategoryID, arg.ProductID)
	var i ProductsProductsCategory
	err := row.Scan(&i.ProductCategoryID, &i.ProductID)
	return i, err
}
